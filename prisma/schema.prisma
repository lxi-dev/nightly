datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model Happening {
  id             String    @id @default(cuid())
  type           String    // 'private' | 'placebound' | 'public'
  published      Boolean   @default(false)
  name           String
  venue          String
  color          String
  text           String?
  dateHappening  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  creatorId      String
  createdBy      User      @relation("HappeningCreator", fields: [creatorId], references: [id])
  invitees       User[]    @relation("HappeningInvitees")
  posts          Post[]
}

model Post {
  id          String   @id @default(cuid())
  text        String
  createdAt   DateTime @default(now())
  happening   Happening @relation(fields: [happeningId], references: [id])
  happeningId String
  // createdBy   User     @relation("PostsCreated", fields: [creatorId], references: [id])
  creatorId   String
}
model User {
  id              String       @id @default(cuid())
  name            String?
  email           String       @unique
  emailVerified   DateTime?
  image           String?
  handle          String?      @unique
  age             String?
  location        String?
  bio             String?
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[] // Optional for WebAuthn support

  createdHappenings Happening[] @relation("HappeningCreator")
  invitedHappenings Happening[] @relation("HappeningInvitees")
  // postsCreated      Post[]      @relation("PostsCreated")

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}